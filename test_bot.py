import random
import asyncio
import psycopg2
import psycopg2.extras
import config
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram import Router

from database import (
    init_db, update_stats,
    reset_user_stats, get_all_user_shown_questions_count,
    log_user_answer, get_daily_user_stats,
    get_user_wrong_answers, get_mistake_questions,
    # --- —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ---
    blacklist_add, blacklist_remove, blacklist_list, blacklist_is_blocked
)

bot = Bot(
    token=config.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
router = Router()

questions = []
user_question_map = {}
last_question_text = {}
user_progress = {}
user_seen_questions = {}   # user_id -> set(question_text)

mistake_mode = {}          # user_id -> True/False
mistake_questions = {}     # user_id -> list of mistake questions
retry_attempts = {}        # user_id -> number of retries for current question

# –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–∑ /blacklist –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
blacklist_cache = {}       # user_id -> [question_text]
awaiting_unban = {}        # user_id -> True/False


def load_questions_from_postgres():
    connection = psycopg2.connect(
        host=config.DB_HOST,
        port=config.DB_PORT,
        user=config.DB_USER,
        password=config.DB_PASSWORD,
        dbname=config.DB_NAME
    )

    with connection:
        with connection.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            cursor.execute("""
                SELECT question, option_a, option_b, option_c, option_d, option_e, correct_answer
                FROM questions
            """)
            result = cursor.fetchall()

            all_qs = []
            for row in result:
                options = [row[k] for k in ['option_a', 'option_b', 'option_c', 'option_d', 'option_e'] if row[k]]
                all_qs.append({
                    "question": row["question"],
                    "options": options,
                    "correct": row["correct_answer"]
                })

    return all_qs


def create_keyboard(num_options):
    builder = InlineKeyboardBuilder()
    for i in range(num_options):
        builder.button(text=str(i + 1), callback_data=f"opt_{i}")
    return builder.as_markup()


@router.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.chat.id
    mistake_mode[user_id] = False
    await message.answer("üß† –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç—Ä–µ–Ω–∞–∂—ë—Ä –ø–æ –º–µ–¥—ç–∫—Å–ø–µ—Ä—Ç–∏–∑–µ. –ù–∞—á–Ω—ë–º!")
    await send_next_question(user_id)


async def send_progress_report(chat_id, user_id):
    progress = user_progress.get(user_id)
    if not progress:
        await bot.send_message(chat_id, "üì≠ –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    total = progress["total"]
    correct_count = progress["correct"]
    incorrect = total - correct_count
    percent = round(correct_count / total * 100, 1) if total else 0.0
    answered_qs = get_all_user_shown_questions_count(user_id)
    remaining = max(len(questions) - answered_qs, 0)

    report = (
        f"üìä <b>–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á—ë—Ç</b>\n"
        f"–í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–æ: <b>{total}</b>\n"
        f"–í–µ—Ä–Ω–æ: <b>{correct_count}</b>\n"
        f"–û—à–∏–±–æ–∫: <b>{incorrect}</b>\n"
        f"–¢–æ—á–Ω–æ—Å—Ç—å: <b>{percent}%</b>\n"
        f"üìö –ï—â—ë –Ω–µ –æ—Ç–≤–µ—á–µ–Ω–æ: <b>{remaining}</b>"
    )
    await bot.send_message(chat_id, report)


async def send_next_question(chat_id):
    user_id = chat_id
    previous_question = last_question_text.get(user_id)

    # –∏—Å–∫–ª—é—á–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    blocked_set = set(blacklist_list(user_id))

    def is_allowed(qtext: str) -> bool:
        return (qtext not in blocked_set) and (qtext != previous_question)

    if mistake_mode.get(user_id):
        pool_src = mistake_questions.get(user_id, [])
        pool = [q for q in pool_src if is_allowed(q["question"])]
        if not pool:
            pool = [q for q in pool_src if q["question"] not in blocked_set]
    else:
        seen = user_seen_questions.setdefault(user_id, set())
        pool = [q for q in questions if (q["question"] not in seen) and is_allowed(q["question"])]
        if not pool:
            pool = [q for q in questions if is_allowed(q["question"])]
        if not pool:
            pool = [q for q in questions if q["question"] not in blocked_set]
        if not pool:
            pool = questions  # –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π

    if not pool:
        await bot.send_message(chat_id, "üì≠ –í–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    q = random.choice(pool)
    shuffled = q["options"].copy()
    random.shuffle(shuffled)
    q["shuffled_options"] = shuffled

    user_question_map[user_id] = q
    last_question_text[user_id] = q["question"]
    if not mistake_mode.get(user_id):
        user_seen_questions.setdefault(user_id, set()).add(q["question"])

    retry_attempts[user_id] = 0

    text = f"<b>–í–æ–ø—Ä–æ—Å:</b>\n{q['question']}\n\n"
    for idx, option in enumerate(shuffled, 1):
        text += f"{idx}. {option}\n"

    keyboard = create_keyboard(len(shuffled))
    await bot.send_message(chat_id, text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("opt_"))
async def handle_answer(callback: types.CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    q = user_question_map.get(user_id)
    if not q:
        await callback.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    index = int(callback.data.replace("opt_", ""))
    selected = q["shuffled_options"][index].strip()
    correct = (q["correct"] or "").strip()
    is_correct = selected == correct

    update_stats(user_id, q["question"], is_correct)
    log_user_answer(user_id, datetime.utcnow().date(), is_correct, q["question"], selected, correct)

    progress = user_progress.setdefault(user_id, {"total": 0, "correct": 0})
    progress["total"] += 1
    if is_correct:
        progress["correct"] += 1

    text = (
        f"‚úÖ –í–µ—Ä–Ω–æ!\n<b>{q['question']}</b>\n–û—Ç–≤–µ—Ç: <b>{correct}</b>"
        if is_correct else
        f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ!\n<b>{q['question']}</b>\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct}</b>"
    )

    # –ö–Ω–æ–ø–∫–∞ "–ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å" ‚Äî –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    kb = InlineKeyboardBuilder()
    kb.button(text="–ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å", callback_data="block_q")
    await callback.message.edit_text(text, reply_markup=kb.as_markup())

    # –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—à–∏–±–æ–∫
    if mistake_mode.get(user_id):
        if is_correct and q in mistake_questions.get(user_id, []):
            mistake_questions[user_id].remove(q)
        elif not is_correct:
            retry_attempts[user_id] += 1
            if retry_attempts[user_id] < 2:
                await asyncio.sleep(1)
                await bot.send_message(callback.message.chat.id, "üîÅ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
                await send_next_question(callback.message.chat.id)
                return

        if not mistake_questions.get(user_id):
            await bot.send_message(callback.message.chat.id, "üéØ –í—Å–µ –æ—à–∏–±–∫–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω—ã! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É.")
            mistake_mode[user_id] = False

    if progress["total"] % 50 == 0:
        await send_progress_report(callback.message.chat.id, user_id)

    await asyncio.sleep(1.5)
    await send_next_question(callback.message.chat.id)


# –ù–∞–∂–∞—Ç–∏–µ "–ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å"
@router.callback_query(F.data == "block_q")
async def on_block_question(callback: types.CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    q = user_question_map.get(user_id)
    if not q:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å.", show_alert=True)
        return

    question_text = q["question"]
    if not blacklist_is_blocked(user_id, question_text):
        blacklist_add(user_id, question_text)

    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    await bot.send_message(callback.message.chat.id, "üö´ –û–∫, –±–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∂—É —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å üëå")


# ======= –ù–æ–≤—ã–π UX –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ =======

def _format_blacklist_list(items):
    lines = ["<b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>"]
    for i, qtext in enumerate(items, start=1):
        preview = qtext.strip().replace("\n", " ")
        if len(preview) > 80:
            preview = preview[:77] + "..."
        lines.append(f"{i}. {preview}")
    return "\n".join(lines)


def _parse_indices(text: str, max_n: int) -> list[int]:
    """
    –ü–∞—Ä—Å–∏—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–∞–º–∏:
    - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –∑–∞–ø—è—Ç—ã–µ
    - –¥–∏–∞–ø–∞–∑–æ–Ω—ã: 2-5
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ (1..max_n)
    """
    raw = text.replace(",", " ").split()
    indices = set()
    for token in raw:
        if "-" in token:
            try:
                a, b = token.split("-", 1)
                a, b = int(a), int(b)
                if a > b:
                    a, b = b, a
                for v in range(a, b + 1):
                    if 1 <= v <= max_n:
                        indices.add(v)
            except ValueError:
                continue
        else:
            try:
                v = int(token)
                if 1 <= v <= max_n:
                    indices.add(v)
            except ValueError:
                continue
    return sorted(indices)


@router.message(Command("blacklist"))
async def blacklist_handler(message: types.Message):
    user_id = message.from_user.id
    items = blacklist_list(user_id)  # —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫-–≤–æ–ø—Ä–æ—Å–æ–≤
    if not items:
        awaiting_unban.pop(user_id, None)
        blacklist_cache.pop(user_id, None)
        await message.answer("–¢–≤–æ–π —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    blacklist_cache[user_id] = items[:]  # –∑–∞–ø–æ–º–Ω–∏–º –ø–æ—Ä—è–¥–æ–∫
    awaiting_unban[user_id] = True       # –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–∏–π –≤–≤–æ–¥ —Å –Ω–æ–º–µ—Ä–∞–º–∏

    text = _format_blacklist_list(items)
    text += "\n\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª/–∑–∞–ø—è—Ç—ã–µ, –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: <code>2-5</code>)."
    await message.answer(text)


# –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ /blacklist –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
@router.message(F.text & ~F.text.startswith("/"))
async def maybe_unban_numbers(message: types.Message):
    user_id = message.from_user.id
    # –µ—Å–ª–∏ –Ω–µ –∂–¥—ë–º –≤–≤–æ–¥ ‚Äî —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (–∏–≥—Ä–æ–≤–æ–π —Ñ–ª–æ—É –Ω–µ –∑–¥–µ—Å—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è)
    if not awaiting_unban.get(user_id):
        return

    items = blacklist_cache.get(user_id) or []
    if not items:
        awaiting_unban[user_id] = False
        await message.answer("–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç.")
        return

    idxs = _parse_indices(message.text or "", len(items))
    if not idxs:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä: <code>1 3 5-7</code>")
        return

    # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
    unlocked = []
    for i in idxs:
        qtext = items[i - 1]
        blacklist_remove(user_id, qtext)
        unlocked.append(i)

    # –û–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫
    new_items = blacklist_list(user_id)
    blacklist_cache[user_id] = new_items
    awaiting_unban[user_id] = False

    reply = f"‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {', '.join(map(str, unlocked))}."
    if new_items:
        reply += "\n\n" + _format_blacklist_list(new_items)
        reply += "\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë ‚Äî —Å–Ω–æ–≤–∞ –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –≤—ã–∑–æ–≤–∏ /blacklist."
    else:
        reply += "\n–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç."

    await message.answer(reply)


# ===========================================


@router.message(Command("progress"))
async def progress_handler(message: types.Message):
    await send_progress_report(message.chat.id, message.from_user.id)


@router.message(Command("week"))
async def weekly_stats_handler(message: types.Message):
    user_id = message.from_user.id
    today = datetime.utcnow().date()
    text_lines = []
    for i in range(7):
        day = today - timedelta(days=i)
        total, correct = get_daily_user_stats(user_id, day)
        if total == 0:
            continue
        percent = round(correct / total * 100, 1)
        text_lines.append(f"{day.strftime('%Y-%m-%d')}: {correct}/{total} ‚Äî {percent}%")

    if text_lines:
        text = "<b>üìÖ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:</b>\n" + "\n".join(text_lines)
    else:
        text = "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é."

    await message.answer(text)


@router.message(Command("stats"))
async def stats_handler(message: types.Message):
    rows = get_user_wrong_answers(message.from_user.id)
    if not rows:
        await message.answer("üì¨ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—à–∏–±–æ–∫.")
        return

    lines = ["<b>‚ùå –û—à–∏–±–∫–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º:</b>"]
    for i, row in enumerate(rows, 1):
        question = row.get('question') or "[–≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω]"
        user_answer = row.get('user_answer') or "-"
        correct_answer = row.get('correct_answer') or "-"
        date_obj = row.get('answered_at')
        date_str = date_obj.strftime('%Y-%m-%d') if date_obj else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        lines.append(f"{i}. {question[:40]}... ‚Äî –≤—ã –≤—ã–±—Ä–∞–ª–∏: {user_answer}, –≤–µ—Ä–Ω–æ: {correct_answer} (–¥–∞—Ç–∞: {date_str})")

    await message.answer("\n".join(lines))


@router.message(Command("errors"))
async def train_mistakes_handler(message: types.Message):
    user_id = message.from_user.id
    mistake_mode[user_id] = True
    mistake_questions[user_id] = get_mistake_questions(user_id)
    if not mistake_questions[user_id]:
        await message.answer("üéâ –ù–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è ‚Äî —Ö–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞!")
        mistake_mode[user_id] = False
        return
    await message.answer("üîÅ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –æ—à–∏–±–∫–∞—Ö!")
    await send_next_question(user_id)


@router.message(Command("reset"))
async def reset_handler(message: types.Message):
    user_id = message.from_user.id
    reset_user_stats(user_id)
    user_progress[user_id] = {"total": 0, "correct": 0}
    user_seen_questions[user_id] = set()
    # –°–±—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å blacklist UX
    blacklist_cache.pop(user_id, None)
    awaiting_unban.pop(user_id, None)
    await message.answer("üîÑ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")


@router.message(Command("help"))
async def help_handler(message: types.Message):
    text = (
        "üß† <b>–¢—Ä–µ–Ω–∞–∂—ë—Ä –ø–æ –º–µ–¥—ç–∫—Å–ø–µ—Ä—Ç–∏–∑–µ</b>\n\n"
        "–¢—ã –ø–æ–ª—É—á–∞–µ—à—å –≤–æ–ø—Ä–æ—Å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.\n"
        "‚úÖ –í–µ—Ä–Ω–æ ‚Äî –∏–¥—ë–º –¥–∞–ª—å—à–µ.\n"
        "‚ùå –ù–µ–≤–µ—Ä–Ω–æ ‚Äî –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.\n\n"
        "üìà <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äî –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º\n"
        "/errors ‚Äî —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–æ–∫\n"
        "/stats ‚Äî —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫\n"
        "/progress ‚Äî –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/week ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë\n"
        "/blacklist ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫; –∑–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n"
        "/help ‚Äî —ç—Ç–æ –º–µ–Ω—é"
    )
    await message.answer(text)


def main():
    init_db()
    global questions
    questions = load_questions_from_postgres()
    dp.include_router(router)
    dp.run_polling(bot)


if __name__ == "__main__":
    main()
